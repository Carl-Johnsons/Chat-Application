// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmallChatApplication.DatabaseContext;

#nullable disable

namespace SmallChatApplication.Migrations
{
    [DbContext(typeof(ChatApplicationContext))]
    [Migration("20231006125054_Add_New_Model")]
    partial class Add_New_Model
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmallChatApplication.Models.GroupMessages", b =>
                {
                    b.Property<int?>("GroupID")
                        .HasColumnType("int");

                    b.Property<int?>("MessageID")
                        .HasColumnType("int");

                    b.HasIndex("GroupID");

                    b.HasIndex("MessageID");

                    b.ToTable("GroupMessages");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Groups", b =>
                {
                    b.Property<int>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupID"));

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupOwnerUserID")
                        .HasColumnType("int");

                    b.HasKey("GroupID");

                    b.HasIndex("GroupOwnerUserID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SmallChatApplication.Models.IndividualMessages", b =>
                {
                    b.Property<int?>("MessageID")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverUserUserID")
                        .HasColumnType("int");

                    b.HasIndex("MessageID");

                    b.HasIndex("ReceiverUserUserID");

                    b.ToTable("IndividualMessages");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Messages", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageID"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<int?>("SenderUserUserID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageID");

                    b.HasIndex("SenderUserUserID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("AvatarURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupsGroupID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Room")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("UserID");

                    b.HasIndex("GroupsGroupID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmallChatApplication.Models.GroupMessages", b =>
                {
                    b.HasOne("SmallChatApplication.Models.Groups", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID");

                    b.HasOne("SmallChatApplication.Models.Messages", "Message")
                        .WithMany()
                        .HasForeignKey("MessageID");

                    b.Navigation("Group");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Groups", b =>
                {
                    b.HasOne("SmallChatApplication.Models.Users", "GroupOwner")
                        .WithMany()
                        .HasForeignKey("GroupOwnerUserID");

                    b.Navigation("GroupOwner");
                });

            modelBuilder.Entity("SmallChatApplication.Models.IndividualMessages", b =>
                {
                    b.HasOne("SmallChatApplication.Models.Messages", "Message")
                        .WithMany()
                        .HasForeignKey("MessageID");

                    b.HasOne("SmallChatApplication.Models.Users", "ReceiverUser")
                        .WithMany()
                        .HasForeignKey("ReceiverUserUserID");

                    b.Navigation("Message");

                    b.Navigation("ReceiverUser");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Messages", b =>
                {
                    b.HasOne("SmallChatApplication.Models.Users", "SenderUser")
                        .WithMany("Messages")
                        .HasForeignKey("SenderUserUserID");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Users", b =>
                {
                    b.HasOne("SmallChatApplication.Models.Groups", null)
                        .WithMany("GroupDeputies")
                        .HasForeignKey("GroupsGroupID");

                    b.HasOne("SmallChatApplication.Models.Users", null)
                        .WithMany("Friends")
                        .HasForeignKey("UsersUserID");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Groups", b =>
                {
                    b.Navigation("GroupDeputies");
                });

            modelBuilder.Entity("SmallChatApplication.Models.Users", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
