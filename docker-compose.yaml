version: '3.8'

services:
  sql-server:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    volumes:
      - ./data/db:/var/opt/mssql/data # bind mount
    user: root #mssql
    ports:
      # Microsoft SQL Server uses the default port 1433 for all database connections
      - '${DB__PORT}:1433'
    networks:
      - back-end
    environment:
      ACCEPT_EULA: ${ACCEPT_EULA}
      SA_PASSWORD: ${SA_PASSWORD}
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -Q 'SELECT 1' || exit 1"
        ]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s

  sql-server.configurator:
    build:
      context: ./data
      dockerfile: Dockerfile
    depends_on:
      sql-server:
        condition: service_healthy
    environment:
      ACCEPT_EULA: ${ACCEPT_EULA}
      SA_PASSWORD: ${SA_PASSWORD}
      IdentityDB: ${IdentityDB}
      MessageDB: ${MessageDB}
    networks:
      - back-end

  rabbitmq:
    # login guest:guest
    image: rabbitmq:3-management
    hostname: "rabbitmq"
    container_name: service-bus
    labels:
      NAME: "rabbitmq"
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT}:15672"
    #   Force to attach to network back-end to use hostname "rabbitmq"
    # Otherwise, use hostname "localhost" didn't work
    networks:
      - back-end
    environment:
      RABBITMQ_MANAGEMENT_ALLOW_WEB_ACCESS: true
    volumes:
      - './data/mq:/var/lib/rabbitmq'
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q ping" ]
      interval: 10s
      timeout: 10s
      retries: 5

  api-gateway:
    build:
      context: ./solutions/APIGatewaySolution
      dockerfile: ./src/APIGateway/Dockerfile
    ports:
      - '${API_GATEWAY_PORT}:80'
    networks:
      - back-end
    env_file:
      - ./solutions/APIGatewaySolution/src/APIGateway/.env

  identity-api:
    build:
      context: solutions
      dockerfile: ./IdentitySolution/DuendeIdentityServer/Dockerfile
    container_name: identity-service
    ports:
      - '${IDENTITY_SERVICE_PORT}:80'
    depends_on:
      sql-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - back-end
    env_file:
      - ./solutions/IdentitySolution/DuendeIdentityServer/.env

  upload-api:
    build:
      context: solutions
      dockerfile: ./UploadFileSolution/src/UploadFileService.API/Dockerfile
    container_name: upload-service
    ports:
      - '${UPLOAD_SERVICE_PORT}:80'
    networks:
      - back-end
    env_file:
      - ./solutions/UploadFileSolution/src/UploadFileService.API/.env

  websocket:
    build:
      context: solutions
      dockerfile: ./ChatHubSolution/src/ChatHub/Dockerfile
    container_name: chat-hub
    ports:
      - '${SIGNALR_PORT}:80'
    networks:
      - back-end
      - front-end
    env_file:
      - ./solutions/ChatHubSolution/src/ChatHub/.env

  conversation-api:
    build:
      context: solutions
      dockerfile: ./ConversationSolution/src/ConversationService.API/Dockerfile
    container_name: conversation-service
    depends_on:
      sql-server:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - '${CONVERSATION_SERVICE}:80'
    networks:
      - back-end
    env_file:
      - ./solutions/ConversationSolution/src/ConversationService.API/.env

  reactapp:
    build:
      context: ./solutions/Client/reactapp
      dockerfile: Dockerfile.dev
    container_name: react-app
    ports:
      - '${CLIENT_PORT}:3000'
    networks:
      - front-end
    env_file:
      - .env
    develop:
      watch:
        - path: ./solutions/Client/reactapp/package.json
          action: rebuild
        - path: ./solutions/Client/reactapp
          target: /app
          action: sync

networks:
  back-end:
  front-end:
