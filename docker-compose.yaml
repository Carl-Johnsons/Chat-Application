version: '3.8'

services:
  chatdb:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: chat-db
    volumes:
      - ./chat-sql-data:/var/opt/mssql/data # bind mount
    user: root #mssql
    ports:
      # Microsoft SQL Server uses the default port 1433 for all database connections
      - '${DB__PORT}:1433'
    networks:
      - back-end
    environment:
      ACCEPT_EULA: ${ACCEPT_EULA}
      SA_PASSWORD: ${SA_PASSWORD}
    restart: always
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${SA_PASSWORD} -Q 'SELECT 1' || exit 1"
        ]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 3s

  chatdb.configurator:
    image: mcr.microsoft.com/mssql/server:2022-latest
    volumes:
      - ./data:/docker-entrypoint-initdb.d
    depends_on:
      chatdb:
        condition: service_healthy
    environment:
      ACCEPT_EULA: ${ACCEPT_EULA}
      SA_PASSWORD: ${SA_PASSWORD}
    # command: >
    #   bash -c '/opt/mssql-tools/bin/sqlcmd -S chatdb -U sa -P ${SA_PASSWORD} -i docker-entrypoint-initdb.d/backup.sql;
    #   echo "All done!";'
    networks:
      - back-end
  api-gateway:
    build: 
      context: ./solutions/APIGatewaySolution
      dockerfile: ./src/APIGateway/Dockerfile
    ports:
      - '5000:80'
    networks:
      - back-end
    env_file:
      - ./solutions/APIGatewaySolution/src/APIGateway/.env

  auth-api:
    build:
      context: ./solutions/AuthSolution
      dockerfile: ./src/AuthService.API/Dockerfile
    container_name: auth-service
    ports:
      - '5001:80'
    depends_on:
      chatdb:
        condition: service_healthy
    networks:
      - back-end
    env_file:
      - ./solutions/AuthSolution/src/AuthService.API/.env

  upload-api:
    build:
      context: ./solutions/UploadFileSolution
      dockerfile: ./src/UploadFileService.API/Dockerfile
    container_name: upload-service
    ports:
      - '5002:80'
    networks:
      - back-end
    env_file:
      - ./solutions/UploadFileSolution/src/UploadFileService.API/.env

#   chatapi:
#     build:
#       context: .
#       dockerfile: ./ChatAPI/Dockerfile
#     container_name: chat-api
#     ports:
#       - '${API__PORT}:80'
#     networks:
#       - back-end
#     env_file:
#       - .env.development
#   # SignalR service to enable real-time communication

  websocket:
    build:
      context: ./solutions/ChatHubSolution
      dockerfile: ./src/ChatHub/Dockerfile
    container_name: chat-hub
    ports:
      - '5003:80'
    networks:
      - back-end
      - front-end
    env_file:
      - ./solutions/ChatHubSolution/src/ChatHub/.env
      
  # rabbitmq: # login guest:guest
  #     image: rabbitmq:3-management
  #     hostname: "rabbitmq"
  #     container_name: service-bus
  #     labels:
  #       NAME: "rabbitmq"
  #     ports:
  #     - "4369:4369"
  #     - "5671:5671"
  #     - "5672:5672"
  #     - "25672:25672"
  #     - "15671:15671"
  #     - "15672:15672"
      
#   reactapp:
#     build:
#       context: ./reactapp
#       dockerfile: Dockerfile.dev
#     container_name: react-app
#     ports:
#       - '${CLIENT__PORT}:3000'
#     networks:
#       - front-end
#     env_file:
#       - .env.development
#     develop:
#       watch:
#         - path: ./reactapp/package.json
#           action: rebuild
#         - path: ./reactapp
#           target: /app
#           action: sync
networks:
  back-end:
  front-end:
