@startuml createComment
hide circle
skinparam classAttributeIconSize 0

class BaseApiController {
    #_sender: ISender 
    #_httpContextAccessor: HttpContextAccessor 
}

class CommentsController {
    +Create(CreateCommentDTO createCommentDTO): Task<IActionResult> 
}

class CreateCommentCommand {
    +UserId: Guid 
    +Content: string 
    +PostId: Guid 
}

class CreateCommentCommandHandler {
    -_context: IApplicationDbContext
    -_unitOfWork: IUnitOfWork 
    +Handle(CreateCommentCommand request, CancellationToken cancellationToken): Task<Result>
}

class IApplicationDbContext {
    +Comments: DbSet<Comment> 
    +Posts: DbSet<Post> 
    +PostComments: DbSet<PostComment>
}

class ApplicationDbContext {
    +Comments: DbSet<Comment>
    +Posts: DbSet<Post>
    +PostComments: DbSet<PostComment>
    #OnConfiguring(DbContextOptionsBuilder optionsBuilder): void
}

class Result {
    +IsFailure: bool 
    +IsSuccess: bool 
    +Errors: IEnumerable<Error> 
    #Result(bool isSuccess, IEnumerable<Error> errors)
    #Result(bool isSuccess, Error error)
    +ThrowIfFailure(): void
    +{static} Success(): Result
    +{static} Failure(Error err): Result
    +{static} Failure(IEnumerable<Error> errs): Result
}

class Error {
    +{static} None: Error
    +{static} implicit operator Result(Error err)
}

class IUnitOfWork {
    SaveChangeAsync(CancellationToken cancellationToken = default): Task 
}

class UnitOfWork {
    -_context: ApplicationDbContext
    +SaveChangeAsync(CancellationToken cancellationToken = default): Task
}

class PostError {
    +{static} NotFound: Error
    +{static} UserNotFound: Error
    +{static} AlreadyInteractedPost: Error
    +{static} NotInteractedPost: Error
}

class CreateCommentDTO {
    +PostId: Guid
    +Content: string
}

class BaseEntity {
    +Id: Guid
}

class BaseAuditableEntity{
    +CreatedAt: DateTime
    +UpdatedAt: DateTime 
}

class Comment {
    +Comment: string
    +UserId: Guid
}

class PostComment {
    +PostId: Guid
    +CommentId: Guid
    +Post: Post
    +Comment: Comment
}

class Post {
    +Content: string
    +Active: bool
    +UserId: Guid
}

interface "IRequest<TResponse>"
interface "IRequestHandler<TRequest, TResponse>"{
    Handle(TRequest request, CancellationToken cancellationToken): Task<TResponse>
}

' ==== Create Comment ====
'API Layer
CommentsController --|> BaseApiController
CommentsController --> CreateCommentCommand
CommentsController --> CreateCommentDTO
'Application Layer
CreateCommentCommand ..|> "IRequest<TResponse>"
CreateCommentCommandHandler --> CreateCommentCommand
CreateCommentCommandHandler --> Result
CreateCommentCommandHandler --> IUnitOfWork
CreateCommentCommandHandler --> IApplicationDbContext
CreateCommentCommandHandler ..|> "IRequestHandler<TRequest, TResponse>"
'Domain Layer
Result <|-- Error
Error -- PostError
Comment --|> BaseAuditableEntity
Post --|> BaseAuditableEntity
BaseAuditableEntity --|> BaseEntity
PostComment --* Post
PostComment --* Comment
'Infrastructure Layer
IUnitOfWork <|.. UnitOfWork
IApplicationDbContext <|.. ApplicationDbContext
ApplicationDbContext --> Comment
ApplicationDbContext --> PostComment
ApplicationDbContext --> Post
@enduml