@startuml getReportPostByPostId
hide circle
skinparam classAttributeIconSize 0

class BaseApiController {
    #_sender: ISender
    #_httpContextAccessor: HttpContextAccessor
}

class PostsController {
    +GetReportPost(Guid id): Task<IActionResult>
}

class GetPostReportByPostIdQuery {
    +PostId: Guid
}

class GetPostReportByPostIdQueryHandler {
    -_context: IApplicationDbContext
    +Handle(GetPostReportByPostIdCommand request, CancellationToken cancellationToken): Task<Result<List<PostReport>?>> 
}

class IApplicationDbContext {
    +Posts: DbSer<Post> 
    +PostReports: DbSet<PostReport>
}

class ApplicationDbContext {
    +Posts: DbSer<Post> 
    +PostReports: DbSet<PostReport>
    #OnConfiguring(DbContextOptionsBuilder optionsBuilder): void
}

class Result {
    +IsFailure: bool
    +IsSuccess: bool
    +Errors: IEnumerable<Error>
    #Result(bool isSuccess, IEnumerable<Error> errors)
    #Result(bool isSuccess, Error error)
    +ThrowIfFailure(): void
    +{static} Success(): Result
    +{static} Failure(Error err): Result
    +{static} Failure(IEnumerable<Error> errs): Result
}

class "Result<T>" {
    +Value: T
    +{static} Success(T value): Result<T>
    +{static} Failure(Error error): Result<T?>
    +{static} Failure(IEnumerable<Error> errs): Result<T?>
}

class Error {
    +{static} None: Error 
    +{static} Result(Error err): implicit operator
}

class PostError {
    +{static} NotFound: Error
    +{static} UserNotFound: Error
    +{static} AlreadyInteractedPost: Error
    +{static} NotInteractedPost: Error
}

class BaseEntity {
    +Id: Guid 
}

class BaseAuditableEntity{
    +CreatedAt: DateTime
    +UpdatedAt: DateTime 
}

class Post {
    +Content: string
    +Active: bool
    +UserId: Guid
}

class PostReport {
    +PostId: Guid 
    +Reason: string 
    +UserId: Guid 
    +Post: Post
} 

interface "IRequest<TResponse>"
interface "IRequestHandler<TRequest, TResponse>"{
    Handle(TRequest request, CancellationToken cancellationToken): Task<TResponse>
}

'==== Get Post Report By Post Id ====
'API Layer
PostsController --|> BaseApiController
PostsController -- GetPostReportByPostIdQuery
'Application Layer
GetPostReportByPostIdQuery ..|> "IRequest<TResponse>"
GetPostReportByPostIdQueryHandler ..|> "IRequestHandler<TRequest, TResponse>"
GetPostReportByPostIdQueryHandler -- GetPostReportByPostIdQuery
GetPostReportByPostIdQueryHandler -- Result
GetPostReportByPostIdQueryHandler -- IApplicationDbContext
'Domain Layer
Result <|-- Error
Result <|-- "Result<T>"
Error -- PostError
PostReport --|> BaseAuditableEntity
Post --|> BaseAuditableEntity
BaseAuditableEntity --|> BaseEntity
PostReport --* Post
'Infrastructure Layer
IApplicationDbContext <|.. ApplicationDbContext
ApplicationDbContext --* Post
ApplicationDbContext --* PostReport
@enduml