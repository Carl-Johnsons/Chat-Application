@startuml getPostById
hide circle
skinparam classAttributeIconSize 0

class BaseApiController {
    #_sender: ISender
    #_httpContextAccessor: HttpContextAccessor
}

class PostsController {
    +GetById(Guid id): Task<IActionResult>
}

class GetPostByIdQuery {
    +Id: Guid
}

class GetPostsByUserIdQueryHandler {
    -_context: IApplicationDbContext
    +Handle(GetPostsByUserIdQuery request, CancellationToken cancellationToken): Task<Result<List<PostDTO>?>>
}

class IApplicationDbContext {
    +Posts: DbSer<Post>
    +Tags: DbSet<Tag>
    +PostTags: DbSet<PostTag> 
    +Interactions: DbSet<Interaction> 
    +PostInteracts: DbSet<PostInteract>
}

class ApplicationDbContext {
    +Posts: DbSer<Post>
    +Tags: DbSet<Tag>
    +PostTags: DbSet<PostTag> 
    +Interactions: DbSet<Interaction> 
    +PostInteracts: DbSet<PostInteract>
    #OnConfiguring(DbContextOptionsBuilder optionsBuilder): void
}

class Result {
    +IsFailure: bool
    +IsSuccess: bool
    +Errors: IEnumerable<Error>
    #Result(bool isSuccess, IEnumerable<Error> errors)
    #Result(bool isSuccess, Error error)
    +ThrowIfFailure(): void
    +{static} Success(): Result
    +{static} Failure(Error err): Result
    +{static} Failure(IEnumerable<Error> errs): Result
}

class "Result<T>" {
    +Value: T
    +{static} Success(T value): Result<T>
    +{static} Failure(Error error): Result<T?>
    +{static} Failure(IEnumerable<Error> errs): Result<T?>
}

class Error {
    +{static} None: Error 
    +{static} Result(Error err): implicit operator
}

class PostError {
    +{static} NotFound: Error
    +{static} UserNotFound: Error
    +{static} AlreadyInteractedPost: Error
    +{static} NotInteractedPost: Error
}

class PostDTO {
    +Guid PostId
    +string Content
    +Guid UserId
    +int InteractTotal 
    +List<string> Interactions
    +DateTime CreatedAt
    +List<string> Tags
}

class BaseEntity {
    +Id: Guid
}

class BaseAuditableEntity{
    +CreatedAt: DateTime
    +UpdatedAt: DateTime
}

class Tag {
    +Value: string
    +Code: string
}

class Post {
    +Content: string
    +Active: bool
    +UserId: Guid
}

class PostTag {
    +PostId: Guid
    +TagId: Guid
    +Post: Post
    +Tag: Tag
}

class Interaction {
    +Value: string
    +Code: string
    +Gif: string
}

class PostInteract {
    +PostId: Guid
    +InteractionId: Guid
    +UserId: Guid
    +Post: Post
    +Interaction: Interaction
}

interface "IRequest<TResponse>"
interface "IRequestHandler<TRequest, TResponse>"{
    Handle(TRequest request, CancellationToken cancellationToken): Task<TResponse>
}

'==== Get Post By User Id====
'API Layer
PostsController --|> BaseApiController
PostsController -- GetPostByIdQuery
'Application Layer
GetPostByIdQuery ..|> "IRequest<TResponse>"
GetPostByIdQueryHandler ..|> "IRequestHandler<TRequest, TResponse>"
GetPostByIdQueryHandler "1"--"1" GetPostByIdQuery
GetPostByIdQueryHandler "1"--"1" Result
GetPostByIdQueryHandler "1" o--"1" IApplicationDbContext
GetPostByIdQueryHandler "1"--"1" PostDTO
'Domain Layer
Result <|-- Error
Result <|-- "Result<T>"
Error -- PostError
Tag --|> BaseEntity
Interaction --|> BaseEntity
Post --|> BaseAuditableEntity
BaseAuditableEntity --|> BaseEntity
PostTag "*"--*"1" Post
PostTag "*"--*"1" Tag
PostInteract "*"--*"1" Post
PostInteract "*"--*"1" Interaction
'Infrastructure Layer
IApplicationDbContext <|.. ApplicationDbContext
ApplicationDbContext "*" o--"1" Tag
ApplicationDbContext "*" o--"1" Post
ApplicationDbContext "*" o--"1" PostTag
ApplicationDbContext "*" o--"1" Interaction
ApplicationDbContext "*" o--"1" PostInteract
@enduml