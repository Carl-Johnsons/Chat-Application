@startuml createGroupConversation
hide circle
skinparam classAttributeIconSize 0

class BaseApiController {
    #_sender: ISender
    #_httpContextAccessor: HttpContextAccessor
}

class GroupConversationController {
    +CreateGroupConversation(CreateGroupConversationDTO createGroupConversationDTO): async Task<IActionResult>
}

class CreateGroupConversationCommand {
    +CreateGroupConversationDTO: CreateGroupConversationDTO
    +CurrentUserID: Guid
}

class CreateGroupConversationCommandHandler {
    -_context: IApplicationDbContext
    -_unitOfWork: IUnitOfWork
    +Handle(CreateGroupConversationCommand request, CancellationToken cancellationToken): async Task<Result> 
}

class IApplicationDbContext {
    +Conversations: DbSet<Conversation>
    +GroupConversation: DbSet<GroupConversation>
    +ConversationUsers: DbSet<ConversationUser>
    +Messages: DbSet<Message>
}

class ApplicationDbContext {
    +Conversations: DbSet<Conversation>
    +GroupConversation: DbSet<GroupConversation>
    +ConversationUsers: DbSet<ConversationUser>
    +Messages: DbSet<Message>
    #OnConfiguring(DbContextOptionsBuilder optionsBuilder): void
}

class Result {
    +bool IsFailure
    +bool IsSuccess
    +IEnumerable<Error> Errors
    #Result(bool isSuccess, IEnumerable<Error> errors)
    #Result(bool isSuccess, Error error)
    +ThrowIfFailure(): void
    {static} +Success(): Result
    {static} +Failure(Error err): Result
    {static} +Failure(IEnumerable<Error> errs): Result
}

class "Result<T>" {
    +T Value
    {static} +Success(T value): Result<T>
    {static} +Failure(Error error): Result<T?>
    {static} +Failure(IEnumerable<Error> errs): Result<T?>
}

class Error {
    {static} +None: Error
    {static} +implicit operator Result(Error err): Result
}

class CreateGroupConversationDTO{
    +MembersId: List<Guid>
    +Name: string
    +ImageURL: string?
}

class IUnitOfWork {
    Task SaveChangeAsync(CancellationToken cancellationToken = default)
}

class UnitOfWork {
    -_context: ApplicationDbContext
    +Task SaveChangeAsync(CancellationToken cancellationToken = default)
}

class GroupConversationError {
    {static} +NotEnoughMember: Error
    {static} +NotFound: Error
}

class BaseEntity {
    +Guid Id
}

class BaseAuditableEntity{
    +DateTime CreatedAt
    +DateTime UpdatedAt
}

class Conversation {
    +Type: string
    +Users: List<ConversationUser>
}

class GroupConversation {
    +Name: string
    +ImageURL: string?
    +InviteURL: string?
}

class ConversationUser {
    +ConversationId: Guid
    +UserId: Guid
    +Role: string
    +ReadTime: DateTime?
    +Conversation: Conversation
}

class Message {
    +SenderId: Guid?
    +ConversationId: Guid
    +Content: string
    +Source: string
    +AttachedFilesURL: string?
    +Active: bool?
    +Conversation: Conversations
}

GroupConversationController --|> BaseApiController
GroupConversationController -- CreateGroupConversationDTO
GroupConversationController -- CreateGroupConversationCommand
CreateGroupConversationCommandHandler -- CreateGroupConversationCommand
CreateGroupConversationCommandHandler -- Result
CreateGroupConversationCommandHandler -- IUnitOfWork
CreateGroupConversationCommandHandler -- IApplicationDbContext
CreateGroupConversationCommandHandler -- GroupConversationError

IUnitOfWork <|.. UnitOfWork
IApplicationDbContext <|.. ApplicationDbContext

Result -- Error
Result <|-- "Result<T>"
Error -- GroupConversationError
ApplicationDbContext --* Conversation
ApplicationDbContext --* GroupConversation
ApplicationDbContext --* ConversationUser
ApplicationDbContext --* Message

Conversation --|> BaseAuditableEntity
GroupConversation --|> Conversation
ConversationUser --|> BaseEntity
ConversationUser --* Conversation
Message --|> BaseAuditableEntity
Message --* Conversation
BaseAuditableEntity --|> BaseEntity
@enduml