@startuml 
hide circle
skinparam classAttributeIconSize 0

class BaseApiController {
    #_sender: ISender
    #_httpContextAccessor: HttpContextAccessor 
}

class ConversationController {
    +GetConversationListByUserId(): Task<IActionResult>
}

class GetConversationListByUserIdQuery {
    +UserId: Guid
}

class GetConversationListByUserIdQueryHandler {
    -_context: IApplicationDbContext
    +Handle(GetConversationListByUserIdQuery request, CancellationToken cancellationToken): Task<Result<ConversationsResponseDTO>>
}

class IApplicationDbContext {
    +Conversations: DbSet<Conversation>
    +ConversationUsers: DbSet<ConversationUser>
}

class ApplicationDbContext {
    +Conversations: DbSet<Conversation>
    +ConversationUsers: DbSet<ConversationUser>
    #OnConfiguring(DbContextOptionsBuilder optionsBuilder): void
}

class Result {
    +IsFailure: bool
    +IsSuccess: bool
    +Errors: IEnumerable<Error>
    #Result(bool isSuccess, IEnumerable<Error> errors)
    #Result(bool isSuccess, Error error)
    +ThrowIfFailure(): void
    +{static} Success(): Result 
    +{static} Failure(Error err): Result
    +{static} Failure(IEnumerable<Error> errs): Result
}

class "Result<T>" {
    +Value: T
    +{static} Success(T value): Result<T>
    +{static} Failure(Error error): Result<T?>
    +{static} Failure(IEnumerable<Error> errs): Result<T?>
}

class Error {
    +{static} None: Error
    +{static} Result(Error err): implicit operator
}

class ConversationUserResponseDTO {
    +UserId: Guid
    +Role: string
    +ReadTime: DateTime?
}

class GroupConversationResponseDTO {
    +Name: string
    +ImageURL: string? 
    +InviteURL: string? 
}

class ConversationResponseDTO {
    +Id: Guid
    +Type: string
    +CreatedAt: DateTime 
    +UpdatedAt: DateTime
    +Users: List<ConversationUserResponseDTO>
}

class BaseEntity {
    +Id: Guid
}

class BaseAuditableEntity{
    +CreatedAt: DateTime
    +UpdatedAt: DateTime
}

class Conversation {
    +Type: string
    +Users: List<ConversationUser>
}

class ConversationUser {
    +ConversationId: Guid
    +UserId: Guid
    +Role: string 
    +ReadTime: DateTime?
    +Conversation: Conversation
}

'==== Get Conversation List By User Id ====
'API Layer
ConversationController --|> BaseApiController
ConversationController --> GetConversationListByUserIdQuery
'Application Layer
GetConversationListByUserIdQueryHandler --> GetConversationListByUserIdQuery
GetConversationListByUserIdQueryHandler --> Result
GetConversationListByUserIdQueryHandler --> IApplicationDbContext
GetConversationListByUserIdQueryHandler --> ConversationUserResponseDTO
GetConversationListByUserIdQueryHandler --> ConversationResponseDTO
GetConversationListByUserIdQueryHandler --> GroupConversationResponseDTO
'Domain Layer
GroupConversationResponseDTO --|> ConversationResponseDTO
Result <|-- Error
Result <|-- "Result<T>"
ConversationUser --|> BaseEntity
Conversation --|> BaseAuditableEntity
Conversation *-- ConversationUser
BaseAuditableEntity --|>BaseEntity
'Infrastructure Layer
IApplicationDbContext <|.. ApplicationDbContext
ApplicationDbContext --> ConversationUser
ApplicationDbContext --> Conversation
@enduml